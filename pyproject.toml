[build-system]
requires = ['setuptools', 'poetry_core>=1.0']
build-backend = 'poetry.core.masonry.api'

[tool.poetry]
name = 'tikzify'
version = "0.16.0"
description = 'Utilities for programmatically generating TikZ code.'
license = 'MIT'
authors = ['Neil Girdhar <mistersheik@gmail.com>']
readme = 'README.rst'
repository = 'https://github.com/NeilGirdhar/tikzify'
classifiers = [
    'Development Status :: 4 - Beta',
    'Intended Audience :: Developers',
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Topic :: Scientific/Engineering :: Visualization',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'License :: OSI Approved :: MIT License']

[tool.poetry.dependencies]
python = '>=3.10,<3.13'
more_itertools = '>=8'
networkx = '>=2.5'
numpy = '>=1.21'
scipy = '>=1.9'

[tool.poetry.group.dev.dependencies]
isort = '>=5.8'
jupyter = '>=1'
mypy = '>=1.0'
pylint = '>=2.8'
pyright = ">=0.0.13"
ruff = '>=0'

[tool.isort]
line_length = 100
multi_line_output = 0
skip_glob = ['.pytype/*.py']

[tool.pytest]

[tool.pylint.master]
jobs = 0

[tool.pylint.messages_control]
disable = [
    'abstract-method',
    'arguments-differ',
    'invalid-name',
    'invalid-unary-operand-type',
    'missing-docstring',
    'no-member',
    'self-cls-assignment',
    'too-few-public-methods',
    'too-many-ancestors',
    'too-many-arguments',
    'too-many-branches',
    'too-many-instance-attributes',
    'too-many-locals',
    'too-many-public-methods',
    'too-many-return-statements',
    'too-many-statements',
    'unused-argument']
enable= [
    'useless-suppression',
    'use-symbolic-message-instead']

[tool.pylint.reports]
output-format = 'colorized'

[tool.pylint.similarities]
min-similarity-lines = 20
ignore-imports = 'yes'

[tool.pyright]
include = ["tikzify", "examples"]
stubPath = ""
enableTypeIgnoreComments = false
reportImportCycles = false
reportCallInDefaultInitializer = true
reportImplicitOverride = false
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportInconsistentConstructor = true
reportMatchNotExhaustive = true
reportMissingParameterType = true
reportMissingSuperCall = true
reportMissingTypeArgument = true
reportOverlappingOverload = true
reportPrivateImportUsage = true
reportShadowedImports = true
reportUninitializedInstanceVariable = true
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnnecessaryContains = true
reportUnnecessaryIsInstance = true
reportUnnecessaryTypeIgnoreComment = true
reportUntypedBaseClass = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true

[tool.mypy]
files = ["tikzify", "examples"]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
pretty = true
show_error_codes = true
show_error_context = false
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
# warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ['more_itertools', 'networkx', 'scipy.signal']
ignore_missing_imports = true

[tool.ruff]
select = ["ALL"]
ignore = ["B008", "B011", "D100", "D101", "D102", "D107", "S101", "D103", "D105",
    "SIM117", "ANN101", "ANN102", "ANN401", "TID252", "FBT003", "I001", "G004",
    "PT013", "PT015", "PGH003", "COM812", "Q000", "TCH001", "TCH002", "TCH003", "ERA001", "ARG001",
    "ARG002", "ARG003", "ARG004", "FIX002", "PD008", "PD011", "PERF203"]
line-length = 100
target-version = "py310"
extend-exclude = ["__init__.py"]

[tool.ruff.flake8-annotations]
mypy-init-return = true

[tool.ruff.flake8-errmsg]
max-string-length = 40

[tool.ruff.isort]
combine-as-imports = true

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.pylint]
max-args = 8
